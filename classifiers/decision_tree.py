from csv import reader

# Load a CSV file
import numpy as np


def load_csv(filename):
    file = open(filename, 'rt')
    lines = reader(file)
    # convert str -> float

    dataset = [list(map(float, row)) for row in lines]
    print("here: " + str(len(dataset)))
    val = np.zeros(13)
    for row in dataset:
        val[int(row[5])]+=1

    print("printing label counts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    for i in range(len(val)):
        print(str(i) + "__" + str(val[i]))
    return dataset


# Split a dataset based on an attribute and an attribute value
import csv
from skimage.io import imread


def test_split(index, value, dataset):
    left, right = list(), list()
    for row in dataset:
        if row[index] < value:
            left.append(row)
        else:
            right.append(row)
    return left, right


# Calculate the Gini index for a split dataset
def gini_index(groups, class_values):
    gini = 0.0
    for class_value in class_values:
        for group in groups:
            size = len(group)
            if size == 0:
                continue
            proportion = [row[-1] for row in group].count(class_value) / float(size)
            gini += (proportion * (1.0 - proportion))
    return gini


# Select the best split point for a dataset
def get_split(dataset):
    # print("get_split tree: "+str(len(dataset[0])))
    class_values = list(set(row[-1] for row in dataset))
    b_index, b_value, b_score, b_groups = 999, 999, 999, None
    for index in range(len(dataset[0]) - 1):
        # print("index: " + str(index))
        for row in dataset:
            # print("row: ")
            groups = test_split(index, row[index], dataset)
            gini = gini_index(groups, class_values)
            if gini < b_score:
                b_index, b_value, b_score, b_groups = index, row[index], gini, groups
    return {'index': b_index, 'value': b_value, 'groups': b_groups}


# Create a terminal node value
def to_terminal(group):
    outcomes = [row[-1] for row in group]
    return max(set(outcomes), key=outcomes.count)


# Create child splits for a node or make terminal
def split(node, max_depth, min_size, depth):
    left, right = node['groups']
    del (node['groups'])
    # check for a no split
    if not left or not right:
        node['left'] = node['right'] = to_terminal(left + right)
        return
    # check for max depth
    if depth >= max_depth:
        node['left'], node['right'] = to_terminal(left), to_terminal(right)
        return
    # process left child
    if len(left) <= min_size:
        node['left'] = to_terminal(left)
    else:
        node['left'] = get_split(left)
        split(node['left'], max_depth, min_size, depth + 1)
    # process right child
    if len(right) <= min_size:
        node['right'] = to_terminal(right)
    else:
        node['right'] = get_split(right)
        split(node['right'], max_depth, min_size, depth + 1)


# Build a decision tree
def build_tree(train, max_depth, min_size):
    # print("build tree: ")
    root = get_split(train)
    split(root, max_depth, min_size, 1)
    return root


# Print a decision tree
def print_tree(node, depth=0):
    if isinstance(node, dict):

        print('%s[X%d < %.3f]' % ((depth * ' ', (node['index'] + 1), node['value'])))
        # if not isinstance(node['left'], dict) and not isinstance(node['right'], dict):
        #     #print("leaf")
        #     #print((node['index'] + 1))
        #     print(node['value'])
        print_tree(node['left'], depth + 1)
        print_tree(node['right'], depth + 1)
    else:
        print('%s[%s]' % ((depth * ' ', node)))


def get_image_arr_from_file(file_path):
    print("in file open")
    with open(file_path, newline='') as file:
        print("in file open")
        reader = csv.reader(file)
        return list(reader)


# dataset = [[2.771244718, 1.784783929, 0],
#            [1.728571309, 1.169761413, 0],
#            [3.678319846, 2.81281357, 0],
#            [3.961043357, 2.61995032, 0],
#            [2.999208922, 2.209014212, 0],
#            [7.497545867, 3.162953546, 1],
#            [9.00220326, 3.339047188, 1],
#            [7.444542326, 0.476683375, 1],
#            [10.12493903, 3.234550982, 1],
#            [6.642287351, 3.319983761, 1]]
# dataset = [
# [71.71875, 114.65034735419471, 0.9730672655996823, 187.265625, 112.6246867625361, -1.0613237065158376, 239.0625, 61.72567208018071, -3.614784456460256, 255.0, 0.0, 0.0, 227.109375, 79.58782829119899, -2.5031308716087945, 167.34375, 121.11451434876622, -0.657951694959769, 199.21875, 105.41665380022978, -1.360672102833218, 211.171875, 96.20429997658304, -1.7394622697814226, 67.734375, 112.6246867625361, 1.0613237065158376, 151.40625, 125.23873686259176, -0.38177085778546666, 159.375, 123.45134416036142, -0.5163977794943223, 219.140625, 88.64674754106535, -2.067546244887276, 147.421875, 125.93398626456789, -0.31638599858416633, 183.28125, 114.65034735419471, -0.9730672655996823, 151.40625, 125.23873686259176, -0.38177085778546666, 151.40625, 125.23873686259176, -0.38177085778546666, 159.375, 123.45134416036142, -0.5163977794943223, 203.203125, 102.59282072949537, -1.475797711023173, 191.25, 110.41823898251593, -1.1547005383792515, 235.078125, 68.43388796118758, -3.1440015525937426, 183.28125, 114.65034735419471, -0.9730672655996823, 215.15625, 92.58850812027106, -1.8934585248125149, 179.296875, 116.50465115279465, -0.8891812384738002, 155.390625, 124.41206949934309, -0.448358830654244, 171.328125, 119.7303030104926, -0.732114158203694, 223.125, 84.33332304018383, -2.2677868380553634, 227.109375, 79.58782829119899, -2.5031308716087945, 247.03125, 44.36812226630174, -5.388159060803248, 223.125, 84.33332304018383, -2.2677868380553634, 239.0625, 61.72567208018071, -3.614784456460256, 247.03125, 44.36812226630174, -5.388159060803248, 247.03125, 44.36812226630174, -5.388159060803248, 151.40625, 125.23873686259176, -0.38177085778546666, 243.046875, 53.89962595171116, -4.287483371536522, 175.3125, 118.19566338808713, -0.8090398349558905, 163.359375, 122.3534029956232, -0.5861606481232525, 211.171875, 96.20429997658304, -1.7394622697814226, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 223.125, 84.33332304018383, -2.2677868380553634, 119.53125, 127.25073289941201, 0.1252448582170299, 219.140625, 88.64674754106535, -2.067546244887276, 87.65625, 121.11451434876622, 0.657951694959769, 99.609375, 124.41206949934309, 0.448358830654244, 143.4375, 126.49998456027573, -0.25197631533948484, 203.203125, 102.59282072949537, -1.475797711023173, 247.03125, 44.36812226630174, -5.388159060803248, 207.1875, 99.52965559947447, -1.6012815380508714, 43.828125, 96.20429997658304, 1.7394622697814226, 75.703125, 116.50465115279465, 0.8891812384738002, 71.71875, 114.65034735419471, 0.9730672655996823, 163.359375, 122.3534029956232, -0.5861606481232525, 107.578125, 125.93398626456789, 0.31638599858416633, 87.65625, 121.11451434876622, 0.657951694959769, 143.4375, 126.49998456027573, -0.25197631533948484, 115.546875, 126.93846069152711, 0.18832944617230335, 11.953125, 53.89962595171116, 4.287483371536522, 51.796875, 102.59282072949537, 1.475797711023173, 179.296875, 116.50465115279465, -0.8891812384738002, 127.5, 127.5, 0.0, 159.375, 123.45134416036142, -0.5163977794943223, 135.46875, 127.25073289941201, -0.1252448582170299, 11.953125, 53.89962595171116, 4.287483371536522, 0.0, 0.0, 0.0,1],
# [182.640625, 64.92985811327, -1.0278411476219715, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 235.5625, 33.976496931702656, -1.9606582874388478, 36.90625, 72.89026828690851, 2.006855299672176, 106.59375, 112.66955538625996, 0.3778631762638478, 132.359375, 117.5249132082614, -0.0657133833866774, 210.96875, 76.85090450630689, -1.6203328032995152, 189.90625, 85.94506216727927, -0.8872454547812996, 124.390625, 102.56333671010015, 0.07529105773364121, 140.75, 96.57558568292507, -0.18623552169721908, 111.25, 67.29320173687681, -0.08168998989659142, 35.46875, 64.32558024174753, 1.6520908560335659, 37.4375, 66.07237390732983, 1.7762249719085867, 114.515625, 102.46371189772199, 0.1652683686337533, 164.09375, 98.60887364196743, -0.5692937874110675, 171.984375, 92.987817109874, -0.7008067656289361, 131.40625, 87.02706453131405, -0.16576983294106815, 107.9375, 84.89752554550692, 0.17511796668372923, 126.546875, 75.51757446273268, -0.007954998065055884, 69.5625, 94.59962919456926, 0.9031591693192469, 221.4375, 58.98672387707254, -1.9258528033645868, 202.421875, 81.90787597346409, -1.4158532469380505, 173.359375, 102.19212408306902, -0.7815334025499211, 228.9375, 71.23637479371055, -2.5847993548566386, 206.59375, 83.88658987548308, -1.4710043597390727, 248.453125, 24.42714274601872, -3.6110691460573805, 206.6875, 72.61087965139934, -1.4473430856345035, 1.109375, 8.80539108213684, 7.81126577552403, 117.1875, 94.03620895032934, 0.0908616479802937, 177.59375, 76.42392433614947, -0.6671451297081767, 136.828125, 113.04376291500728, -0.17132058052005317, 174.25, 109.27931528885053, -0.7737564890621533, 185.234375, 84.27276068433605, -1.074191762363418, 162.046875, 82.04713387885268, -0.33821061251252504, 145.953125, 53.44899136311531, 0.3224579311932734, 35.9375, 80.51899523559642, 2.0806098047437307, 42.78125, 63.787113890169856, 1.6272841401322475, 105.796875, 88.61930159527536, 0.28673206563301035, 71.265625, 92.71364553483686, 0.8300160927952035, 101.421875, 110.47720419382622, 0.3550008649262153, 119.046875, 112.05138744225515, 0.05240558226879498, 153.265625, 81.73398967601774, -0.5937719951109703, 114.21875, 31.98753114007863, 0.1533750003504687, 167.640625, 90.59341987478658, -0.4678340746687958, 19.109375, 50.47775413099691, 2.941146032713594, 170.578125, 89.36141587108149, -0.7907844473982528, 113.9375, 100.71554544234966, 0.2172261161196098, 92.859375, 99.22888112646123, 0.4468641960768356, 134.078125, 92.931981962532, -0.1612496917930891, 150.125, 78.54129089211611, -0.19191948258837108, 22.03125, 36.26550045756297, 1.7469017128711894, 229.6875, 48.76245834399656, -1.7091091997670453, 104.34375, 119.72366865385266, 0.36735650274511655, 7.328125, 29.11939575239114, 4.627224488659427, 139.171875, 111.03765615314641, -0.18259782789709514, 194.953125, 92.92393221196774, -1.2317034625357226, 118.109375, 104.39844305404834, 0.1026444051068507, 9.515625, 25.49018940414871, 2.7034728631955334, 14.578125, 47.06305766186867, 3.8370746945323564,2],
# [124.1875, 37.7578116917546, -0.42565460138403854, 140.703125, 16.528081867971704, 0.6849578181955991, 146.6875, 19.99365133611167, 0.15615396821842853, 192.1875, 17.58361719755068, -0.5532014395625122, 164.015625, 11.82752640493248, 1.3792146601250157, 149.453125, 6.916758831589764, -0.011859842248612657, 127.109375, 28.61714804290209, -2.142363571127405, 99.375, 39.59502020456613, -0.4859641482308983, 216.046875, 17.144085794651605, -0.5943419011772374, 131.15625, 44.10364878258374, -0.029772761215829342, 124.625, 55.99232648318875, -0.3261401264114965, 225.859375, 11.529672571646387, -1.7781542152883851, 195.390625, 19.820772868618796, -0.5542669231521833, 173.703125, 20.272117310098, 0.1107784477250802, 168.484375, 14.829228093848142, 0.2874971250126462, 127.015625, 28.94363713943662, -0.3862954728994009, 237.796875, 9.245234731166915, -1.5627354212022877, 114.421875, 52.65744388483337, 0.555082919495665, 109.609375, 47.63356786037946, -0.3114433728910291, 231.234375, 7.974063792030698, -0.4760253940264061, 206.6875, 13.519517141895268, 0.15918383179525047, 181.296875, 35.968162869882235, -1.246571583277796, 175.3125, 36.46139868065952, -1.8047569691622174, 182.859375, 18.2934988345416, -1.3303118076547455, 246.375, 5.218656436287025, -0.9870419264277882, 173.484375, 45.45498878956385, -0.40386861645581495, 151.96875, 40.43705322396156, -0.07676167323811332, 201.046875, 16.788602614106242, -0.36200997106980176, 123.125, 34.703431026340894, -0.3864101812272782, 130.234375, 38.92209453972608, -0.9933585578781475, 137.265625, 37.249262655244266, -0.4762034202470114, 203.65625, 16.209775937300922, -1.49131086706646, 246.28125, 4.353406532532885, -0.8781211709109946, 205.921875, 30.482220579944222, -1.797992874682547, 216.0, 43.7335683428645, -1.9397693122949224, 228.6875, 16.437262355696582, -1.7007728906947581, 110.4375, 35.399450472429656, 0.9271487718884206, 132.09375, 53.724039879159314, -0.26650763679356076, 132.953125, 49.61931002880204, 0.11141475304544213, 203.359375, 18.593822216246313, -1.560688527207972, 238.234375, 10.032357318166802, -0.08249338722376552, 121.875, 62.01096173258402, 0.34187000394855543, 120.46875, 60.35777931168028, -0.024957560848470572, 217.0625, 17.250792554256748, -0.8717557773207947, 174.59375, 51.842525603383756, -1.3051573799777232, 160.359375, 43.418878090173806, -1.2443089336059792, 165.546875, 41.468334940462405, -1.3563142073851313, 189.828125, 15.254665974198682, -0.3934488671217761, 187.1875, 29.375199467407878, -0.4156681550221751, 106.40625, 40.52341867287976, 0.15441241985492596, 135.15625, 54.61290448179349, -0.6964033526387748, 225.859375, 10.754166616217875, -0.8690284312433125, 205.390625, 10.171370955253524, -0.41397628540464204, 190.609375, 18.069844689686047, -0.6458737351234378, 171.96875, 24.430365806461023, -0.8028625185106536, 114.515625, 40.24495006655338, 0.5549173017543492, 87.1875, 41.62739294923476, 0.14714478060927363, 115.5, 33.291327699567645, 0.06261400827631679, 118.171875, 47.41556794961308, 0.14932305241366717, 180.234375, 31.559835128837015, -1.1658019643098347, 156.265625, 42.310696855043346, -0.7949709204505847, 121.40625, 29.87459139364922, 0.1648160583405031, 95.5, 15.696337152342263, 1.7530192852065354, 83.734375, 2.676531030900819, -0.2089771343696397,3],
# [51094.8125, 4250.678952660827, 0.36601186227748983, 58824.890625, 1781.7749412207227, -0.5952666945618991, 61386.859375, 2013.8389402083797, -0.29990276007530897, 59732.421875, 1532.4700425771737, -0.221225816976669, 57837.046875, 1179.8491221032182, -0.34795634406497566, 54459.90625, 3688.2854363458555, -1.2153494536578924, 44059.4375, 4567.148104517058, -1.0628542528296274, 29145.40625, 4487.327530525373, 1.2884786271502775, 47553.03125, 4266.211792858324, 0.25439710863709936, 44368.640625, 13197.031890930044, -0.7336963895162657, 38309.0625, 15336.979342094835, 0.29482536013152855, 48737.640625, 9821.465996681687, -0.5348811261893319, 45432.78125, 9279.006793679398, -0.4829469521845727, 30892.203125, 14286.791843976564, 0.2799036205174895, 27109.484375, 8591.499836306572, 0.19751139800089668, 27225.9375, 3087.6370155579734, 1.874599926213593, 49898.15625, 6743.223260751192, -0.8660285912467138, 35168.84375, 11667.101114376524, 0.3155770149515028, 31466.4375, 12506.892111045963, 0.33712365428607816, 48681.421875, 11802.762134089482, -0.774575032886077, 39180.453125, 14604.049711177811, 0.12378713108348981, 26643.671875, 8813.270498328586, -0.07364778183451852, 25073.5625, 10010.41753293007, -0.03722848835293756, 29667.4375, 5208.586060160065, -0.30898866140302117, 52271.390625, 5601.851567833363, -0.26740071166248397, 58768.671875, 4392.805599267851, -2.093927149875247, 53355.609375, 8062.62203515625, -1.1589811086962354, 52504.296875, 6500.480801159268, -1.416772080286423, 45830.328125, 10002.907366508949, 0.2187934382444828, 38742.75, 6865.135800732568, 0.1588001624997595, 41903.046875, 5415.979595805152, -0.3614015487090298, 32426.171875, 6336.619350930272, -0.09249140413322961, 43581.578125, 8190.905484141938, 0.5784076153343883, 43653.859375, 8083.491026985161, 0.1620098429216142, 42220.28125, 6606.116880089122, -0.7080212214930796, 35827.40625, 9265.010261595016, 0.3777208621790055, 30534.8125, 7653.692762473795, 1.1296264000839018, 28723.765625, 4318.809821373634, -0.8884123426199251, 32835.765625, 4352.135412437596, 1.0604165474165603, 24206.1875, 6873.38004749801, -0.9286648569538536, 33401.96875, 3765.8855821404663, 0.7569985726152981, 39786.8125, 3550.030536290322, -0.6547966079560137, 36377.546875, 12691.280372673307, -0.8329080036401862, 37465.78125, 8739.354430299669, -0.14948279633876488, 34506.265625, 8311.531855730227, 0.36858235761514574, 25117.734375, 9353.975016073025, -1.1676929031030703, 30105.140625, 7932.581332050722, -1.52498096072018, 16953.96875, 6752.361498877518, 0.45159685426471036, 31779.65625, 4569.710676080701, 2.2109444597044305, 38642.359375, 5348.859228164882, -0.4512713359249665, 47219.734375, 5299.016985023577, -2.28651546845402, 48801.890625, 3134.161227092842, -0.5362644683580378, 43814.484375, 5345.698881437848, 0.5562112350848015, 35843.46875, 3317.120150487986, 0.7611701889488701, 25246.234375, 5601.874596235029, 0.28635889809268594, 13837.84375, 5099.729919989483, 0.7068010541733045, 30458.515625, 6275.155142484993, 0.3089989594185681, 41830.765625, 5757.771947936403, -1.2441140135077189, 35590.484375, 9552.420709223703, 0.6687739715286529, 42818.609375, 9840.807491348824, -0.3263577980762701, 38196.625, 10257.940589642007, -0.19089386019768315, 28133.46875, 9421.11497178139, 0.4831342327412234, 22174.28125, 3116.114650433844, 2.1216992015980245, 12372.140625, 5017.646765003452, 0.8707759992220254,4],
# [171.328125, 119.7303030104926, -0.732114158203694, 235.078125, 68.43388796118758, -3.1440015525937426, 235.078125, 68.43388796118758, -3.1440015525937426, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 247.03125, 44.36812226630174, -5.388159060803248, 75.703125, 116.50465115279465, 0.8891812384738002, 139.453125, 126.93846069152711, -0.18832944617230335, 123.515625, 127.43772893401457, 0.06253053994807224, 131.484375, 127.43772893401457, -0.06253053994807224, 179.296875, 116.50465115279465, -0.8891812384738002, 251.015625, 31.624996140068934, -7.81126577552403, 163.359375, 122.3534029956232, -0.5861606481232525, 111.5625, 126.49998456027573, 0.25197631533948484, 99.609375, 124.41206949934309, 0.448358830654244, 199.21875, 105.41665380022978, -1.360672102833218, 183.28125, 114.65034735419471, -0.9730672655996823, 215.15625, 92.58850812027106, -1.8934585248125149, 223.125, 84.33332304018383, -2.2677868380553634, 235.078125, 68.43388796118758, -3.1440015525937426, 191.25, 110.41823898251593, -1.1547005383792515, 187.265625, 112.6246867625361, -1.0613237065158376, 163.359375, 122.3534029956232, -0.5861606481232525, 167.34375, 121.11451434876622, -0.657951694959769, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 235.078125, 68.43388796118758, -3.1440015525937426, 239.0625, 61.72567208018071, -3.614784456460256, 239.0625, 61.72567208018071, -3.614784456460256, 255.0, 0.0, 0.0, 219.140625, 88.64674754106535, -2.067546244887276, 103.59375, 125.23873686259176, 0.38177085778546666, 215.15625, 92.58850812027106, -1.8934585248125149, 247.03125, 44.36812226630174, -5.388159060803248, 199.21875, 105.41665380022978, -1.360672102833218, 175.3125, 118.19566338808713, -0.8090398349558905, 191.25, 110.41823898251593, -1.1547005383792515, 223.125, 84.33332304018383, -2.2677868380553634, 155.390625, 124.41206949934309, -0.448358830654244, 39.84375, 92.58850812027106, 1.8934585248125149, 171.328125, 119.7303030104926, -0.732114158203694, 215.15625, 92.58850812027106, -1.8934585248125149, 139.453125, 126.93846069152711, -0.18832944617230335, 159.375, 123.45134416036142, -0.5163977794943223, 167.34375, 121.11451434876622, -0.657951694959769, 211.171875, 96.20429997658304, -1.7394622697814226, 123.515625, 127.43772893401457, 0.06253053994807224, 47.8125, 99.52965559947447, 1.6012815380508714, 139.453125, 126.93846069152711, -0.18832944617230335, 239.0625, 61.72567208018071, -3.614784456460256, 219.140625, 88.64674754106535, -2.067546244887276, 195.234375, 108.01992614031623, -1.2541088930576398, 215.15625, 92.58850812027106, -1.8934585248125149, 131.484375, 127.43772893401457, -0.06253053994807224, 79.6875, 118.19566338808713, 0.8090398349558905, 71.71875, 114.65034735419471, 0.9730672655996823, 35.859375, 88.64674754106535, 2.067546244887276, 147.421875, 125.93398626456789, -0.31638599858416633, 235.078125, 68.43388796118758, -3.1440015525937426, 255.0, 0.0, 0.0, 175.3125, 118.19566338808713, -0.8090398349558905, 111.5625, 126.49998456027573, 0.25197631533948484, 79.6875, 118.19566338808713, 0.8090398349558905,1]

# ]
# print("hello")
# dataset = load_csv("/Users/arushigaur/Documents/masters_projects/mwdb/Mwdb_Project_2/output_test/output.csv")
# print(len(dataset))
# tree = build_tree(dataset, 2000, 1)
# print_tree(tree)
# print("after tree")

# Split a dataset based on an attribute and an attribute value
import csv
from skimage.io import imread


def test_split(index, value, dataset):
    left, right = list(), list()
    for row in dataset:
        if row[index] < value:
            left.append(row)
        else:
            right.append(row)
    return left, right


# Calculate the Gini index for a split dataset
def gini_index(groups, class_values):
    gini = 0.0
    for class_value in class_values:
        for group in groups:
            size = len(group)
            if size == 0:
                continue
            proportion = [row[-1] for row in group].count(class_value) / float(size)
            gini += (proportion * (1.0 - proportion))
    return gini


# Select the best split point for a dataset
def get_split(dataset):
    # print("get_split tree: "+str(len(dataset[0])))
    class_values = list(set(row[-1] for row in dataset))
    b_index, b_value, b_score, b_groups = 999, 999, 999, None
    for index in range(len(dataset[0]) - 1):
        # print("index: " + str(index))
        for row in dataset:
            # print("row: ")
            groups = test_split(index, row[index], dataset)
            gini = gini_index(groups, class_values)
            if gini < b_score:
                b_index, b_value, b_score, b_groups = index, row[index], gini, groups
    return {'index': b_index, 'value': b_value, 'groups': b_groups}


# Create a terminal node value
def to_terminal(group):
    outcomes = [row[-1] for row in group]
    return max(set(outcomes), key=outcomes.count)


# Create child splits for a node or make terminal
def split(node, max_depth, min_size, depth):
    left, right = node['groups']
    del (node['groups'])
    # check for a no split
    if not left or not right:
        node['left'] = node['right'] = to_terminal(left + right)
        return
    # check for max depth
    if depth >= max_depth:
        node['left'], node['right'] = to_terminal(left), to_terminal(right)
        return
    # process left child
    if len(left) <= min_size:
        node['left'] = to_terminal(left)
    else:
        node['left'] = get_split(left)
        split(node['left'], max_depth, min_size, depth + 1)
    # process right child
    if len(right) <= min_size:
        node['right'] = to_terminal(right)
    else:
        node['right'] = get_split(right)
        split(node['right'], max_depth, min_size, depth + 1)


# Build a decision tree
def build_tree(train, max_depth, min_size):
    # print("build tree: ")
    root = get_split(train)
    split(root, max_depth, min_size, 1)
    return root


# Print a decision tree
def print_tree(node, depth=0):
    if isinstance(node, dict):

        print('%s[X%d < %.3f]' % ((depth * ' ', (node['index'] + 1), node['value'])))
        # if not isinstance(node['left'], dict) and not isinstance(node['right'], dict):
        #     #print("leaf")
        #     #print((node['index'] + 1))
        #     print(node['value'])
        print_tree(node['left'], depth + 1)
        print_tree(node['right'], depth + 1)
    else:
        print('%s[%s]' % ((depth * ' ', node)))


def get_image_arr_from_file(file_path):
    print("in file open")
    with open(file_path, newline='') as file:
        print("in file open")
        reader = csv.reader(file)
        return list(reader)

def read_dataset_and_construct_tree():
    print("hello")
    dataset = load_csv("/Users/arushigaur/Documents/masters_projects/mwdb/Mwdb_Project_2/output_test/output.csv")
    print(len(dataset))
    tree = build_tree(dataset, 2000, 1)
    print_tree(tree)
    print("after tree")
# dataset = [[2.771244718, 1.784783929, 0],
#            [1.728571309, 1.169761413, 0],
#            [3.678319846, 2.81281357, 0],
#            [3.961043357, 2.61995032, 0],
#            [2.999208922, 2.209014212, 0],
#            [7.497545867, 3.162953546, 1],
#            [9.00220326, 3.339047188, 1],
#            [7.444542326, 0.476683375, 1],
#            [10.12493903, 3.234550982, 1],
#            [6.642287351, 3.319983761, 1]]
# dataset = [
# [71.71875, 114.65034735419471, 0.9730672655996823, 187.265625, 112.6246867625361, -1.0613237065158376, 239.0625, 61.72567208018071, -3.614784456460256, 255.0, 0.0, 0.0, 227.109375, 79.58782829119899, -2.5031308716087945, 167.34375, 121.11451434876622, -0.657951694959769, 199.21875, 105.41665380022978, -1.360672102833218, 211.171875, 96.20429997658304, -1.7394622697814226, 67.734375, 112.6246867625361, 1.0613237065158376, 151.40625, 125.23873686259176, -0.38177085778546666, 159.375, 123.45134416036142, -0.5163977794943223, 219.140625, 88.64674754106535, -2.067546244887276, 147.421875, 125.93398626456789, -0.31638599858416633, 183.28125, 114.65034735419471, -0.9730672655996823, 151.40625, 125.23873686259176, -0.38177085778546666, 151.40625, 125.23873686259176, -0.38177085778546666, 159.375, 123.45134416036142, -0.5163977794943223, 203.203125, 102.59282072949537, -1.475797711023173, 191.25, 110.41823898251593, -1.1547005383792515, 235.078125, 68.43388796118758, -3.1440015525937426, 183.28125, 114.65034735419471, -0.9730672655996823, 215.15625, 92.58850812027106, -1.8934585248125149, 179.296875, 116.50465115279465, -0.8891812384738002, 155.390625, 124.41206949934309, -0.448358830654244, 171.328125, 119.7303030104926, -0.732114158203694, 223.125, 84.33332304018383, -2.2677868380553634, 227.109375, 79.58782829119899, -2.5031308716087945, 247.03125, 44.36812226630174, -5.388159060803248, 223.125, 84.33332304018383, -2.2677868380553634, 239.0625, 61.72567208018071, -3.614784456460256, 247.03125, 44.36812226630174, -5.388159060803248, 247.03125, 44.36812226630174, -5.388159060803248, 151.40625, 125.23873686259176, -0.38177085778546666, 243.046875, 53.89962595171116, -4.287483371536522, 175.3125, 118.19566338808713, -0.8090398349558905, 163.359375, 122.3534029956232, -0.5861606481232525, 211.171875, 96.20429997658304, -1.7394622697814226, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 223.125, 84.33332304018383, -2.2677868380553634, 119.53125, 127.25073289941201, 0.1252448582170299, 219.140625, 88.64674754106535, -2.067546244887276, 87.65625, 121.11451434876622, 0.657951694959769, 99.609375, 124.41206949934309, 0.448358830654244, 143.4375, 126.49998456027573, -0.25197631533948484, 203.203125, 102.59282072949537, -1.475797711023173, 247.03125, 44.36812226630174, -5.388159060803248, 207.1875, 99.52965559947447, -1.6012815380508714, 43.828125, 96.20429997658304, 1.7394622697814226, 75.703125, 116.50465115279465, 0.8891812384738002, 71.71875, 114.65034735419471, 0.9730672655996823, 163.359375, 122.3534029956232, -0.5861606481232525, 107.578125, 125.93398626456789, 0.31638599858416633, 87.65625, 121.11451434876622, 0.657951694959769, 143.4375, 126.49998456027573, -0.25197631533948484, 115.546875, 126.93846069152711, 0.18832944617230335, 11.953125, 53.89962595171116, 4.287483371536522, 51.796875, 102.59282072949537, 1.475797711023173, 179.296875, 116.50465115279465, -0.8891812384738002, 127.5, 127.5, 0.0, 159.375, 123.45134416036142, -0.5163977794943223, 135.46875, 127.25073289941201, -0.1252448582170299, 11.953125, 53.89962595171116, 4.287483371536522, 0.0, 0.0, 0.0,1],
# [182.640625, 64.92985811327, -1.0278411476219715, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 235.5625, 33.976496931702656, -1.9606582874388478, 36.90625, 72.89026828690851, 2.006855299672176, 106.59375, 112.66955538625996, 0.3778631762638478, 132.359375, 117.5249132082614, -0.0657133833866774, 210.96875, 76.85090450630689, -1.6203328032995152, 189.90625, 85.94506216727927, -0.8872454547812996, 124.390625, 102.56333671010015, 0.07529105773364121, 140.75, 96.57558568292507, -0.18623552169721908, 111.25, 67.29320173687681, -0.08168998989659142, 35.46875, 64.32558024174753, 1.6520908560335659, 37.4375, 66.07237390732983, 1.7762249719085867, 114.515625, 102.46371189772199, 0.1652683686337533, 164.09375, 98.60887364196743, -0.5692937874110675, 171.984375, 92.987817109874, -0.7008067656289361, 131.40625, 87.02706453131405, -0.16576983294106815, 107.9375, 84.89752554550692, 0.17511796668372923, 126.546875, 75.51757446273268, -0.007954998065055884, 69.5625, 94.59962919456926, 0.9031591693192469, 221.4375, 58.98672387707254, -1.9258528033645868, 202.421875, 81.90787597346409, -1.4158532469380505, 173.359375, 102.19212408306902, -0.7815334025499211, 228.9375, 71.23637479371055, -2.5847993548566386, 206.59375, 83.88658987548308, -1.4710043597390727, 248.453125, 24.42714274601872, -3.6110691460573805, 206.6875, 72.61087965139934, -1.4473430856345035, 1.109375, 8.80539108213684, 7.81126577552403, 117.1875, 94.03620895032934, 0.0908616479802937, 177.59375, 76.42392433614947, -0.6671451297081767, 136.828125, 113.04376291500728, -0.17132058052005317, 174.25, 109.27931528885053, -0.7737564890621533, 185.234375, 84.27276068433605, -1.074191762363418, 162.046875, 82.04713387885268, -0.33821061251252504, 145.953125, 53.44899136311531, 0.3224579311932734, 35.9375, 80.51899523559642, 2.0806098047437307, 42.78125, 63.787113890169856, 1.6272841401322475, 105.796875, 88.61930159527536, 0.28673206563301035, 71.265625, 92.71364553483686, 0.8300160927952035, 101.421875, 110.47720419382622, 0.3550008649262153, 119.046875, 112.05138744225515, 0.05240558226879498, 153.265625, 81.73398967601774, -0.5937719951109703, 114.21875, 31.98753114007863, 0.1533750003504687, 167.640625, 90.59341987478658, -0.4678340746687958, 19.109375, 50.47775413099691, 2.941146032713594, 170.578125, 89.36141587108149, -0.7907844473982528, 113.9375, 100.71554544234966, 0.2172261161196098, 92.859375, 99.22888112646123, 0.4468641960768356, 134.078125, 92.931981962532, -0.1612496917930891, 150.125, 78.54129089211611, -0.19191948258837108, 22.03125, 36.26550045756297, 1.7469017128711894, 229.6875, 48.76245834399656, -1.7091091997670453, 104.34375, 119.72366865385266, 0.36735650274511655, 7.328125, 29.11939575239114, 4.627224488659427, 139.171875, 111.03765615314641, -0.18259782789709514, 194.953125, 92.92393221196774, -1.2317034625357226, 118.109375, 104.39844305404834, 0.1026444051068507, 9.515625, 25.49018940414871, 2.7034728631955334, 14.578125, 47.06305766186867, 3.8370746945323564,2],
# [124.1875, 37.7578116917546, -0.42565460138403854, 140.703125, 16.528081867971704, 0.6849578181955991, 146.6875, 19.99365133611167, 0.15615396821842853, 192.1875, 17.58361719755068, -0.5532014395625122, 164.015625, 11.82752640493248, 1.3792146601250157, 149.453125, 6.916758831589764, -0.011859842248612657, 127.109375, 28.61714804290209, -2.142363571127405, 99.375, 39.59502020456613, -0.4859641482308983, 216.046875, 17.144085794651605, -0.5943419011772374, 131.15625, 44.10364878258374, -0.029772761215829342, 124.625, 55.99232648318875, -0.3261401264114965, 225.859375, 11.529672571646387, -1.7781542152883851, 195.390625, 19.820772868618796, -0.5542669231521833, 173.703125, 20.272117310098, 0.1107784477250802, 168.484375, 14.829228093848142, 0.2874971250126462, 127.015625, 28.94363713943662, -0.3862954728994009, 237.796875, 9.245234731166915, -1.5627354212022877, 114.421875, 52.65744388483337, 0.555082919495665, 109.609375, 47.63356786037946, -0.3114433728910291, 231.234375, 7.974063792030698, -0.4760253940264061, 206.6875, 13.519517141895268, 0.15918383179525047, 181.296875, 35.968162869882235, -1.246571583277796, 175.3125, 36.46139868065952, -1.8047569691622174, 182.859375, 18.2934988345416, -1.3303118076547455, 246.375, 5.218656436287025, -0.9870419264277882, 173.484375, 45.45498878956385, -0.40386861645581495, 151.96875, 40.43705322396156, -0.07676167323811332, 201.046875, 16.788602614106242, -0.36200997106980176, 123.125, 34.703431026340894, -0.3864101812272782, 130.234375, 38.92209453972608, -0.9933585578781475, 137.265625, 37.249262655244266, -0.4762034202470114, 203.65625, 16.209775937300922, -1.49131086706646, 246.28125, 4.353406532532885, -0.8781211709109946, 205.921875, 30.482220579944222, -1.797992874682547, 216.0, 43.7335683428645, -1.9397693122949224, 228.6875, 16.437262355696582, -1.7007728906947581, 110.4375, 35.399450472429656, 0.9271487718884206, 132.09375, 53.724039879159314, -0.26650763679356076, 132.953125, 49.61931002880204, 0.11141475304544213, 203.359375, 18.593822216246313, -1.560688527207972, 238.234375, 10.032357318166802, -0.08249338722376552, 121.875, 62.01096173258402, 0.34187000394855543, 120.46875, 60.35777931168028, -0.024957560848470572, 217.0625, 17.250792554256748, -0.8717557773207947, 174.59375, 51.842525603383756, -1.3051573799777232, 160.359375, 43.418878090173806, -1.2443089336059792, 165.546875, 41.468334940462405, -1.3563142073851313, 189.828125, 15.254665974198682, -0.3934488671217761, 187.1875, 29.375199467407878, -0.4156681550221751, 106.40625, 40.52341867287976, 0.15441241985492596, 135.15625, 54.61290448179349, -0.6964033526387748, 225.859375, 10.754166616217875, -0.8690284312433125, 205.390625, 10.171370955253524, -0.41397628540464204, 190.609375, 18.069844689686047, -0.6458737351234378, 171.96875, 24.430365806461023, -0.8028625185106536, 114.515625, 40.24495006655338, 0.5549173017543492, 87.1875, 41.62739294923476, 0.14714478060927363, 115.5, 33.291327699567645, 0.06261400827631679, 118.171875, 47.41556794961308, 0.14932305241366717, 180.234375, 31.559835128837015, -1.1658019643098347, 156.265625, 42.310696855043346, -0.7949709204505847, 121.40625, 29.87459139364922, 0.1648160583405031, 95.5, 15.696337152342263, 1.7530192852065354, 83.734375, 2.676531030900819, -0.2089771343696397,3],
# [51094.8125, 4250.678952660827, 0.36601186227748983, 58824.890625, 1781.7749412207227, -0.5952666945618991, 61386.859375, 2013.8389402083797, -0.29990276007530897, 59732.421875, 1532.4700425771737, -0.221225816976669, 57837.046875, 1179.8491221032182, -0.34795634406497566, 54459.90625, 3688.2854363458555, -1.2153494536578924, 44059.4375, 4567.148104517058, -1.0628542528296274, 29145.40625, 4487.327530525373, 1.2884786271502775, 47553.03125, 4266.211792858324, 0.25439710863709936, 44368.640625, 13197.031890930044, -0.7336963895162657, 38309.0625, 15336.979342094835, 0.29482536013152855, 48737.640625, 9821.465996681687, -0.5348811261893319, 45432.78125, 9279.006793679398, -0.4829469521845727, 30892.203125, 14286.791843976564, 0.2799036205174895, 27109.484375, 8591.499836306572, 0.19751139800089668, 27225.9375, 3087.6370155579734, 1.874599926213593, 49898.15625, 6743.223260751192, -0.8660285912467138, 35168.84375, 11667.101114376524, 0.3155770149515028, 31466.4375, 12506.892111045963, 0.33712365428607816, 48681.421875, 11802.762134089482, -0.774575032886077, 39180.453125, 14604.049711177811, 0.12378713108348981, 26643.671875, 8813.270498328586, -0.07364778183451852, 25073.5625, 10010.41753293007, -0.03722848835293756, 29667.4375, 5208.586060160065, -0.30898866140302117, 52271.390625, 5601.851567833363, -0.26740071166248397, 58768.671875, 4392.805599267851, -2.093927149875247, 53355.609375, 8062.62203515625, -1.1589811086962354, 52504.296875, 6500.480801159268, -1.416772080286423, 45830.328125, 10002.907366508949, 0.2187934382444828, 38742.75, 6865.135800732568, 0.1588001624997595, 41903.046875, 5415.979595805152, -0.3614015487090298, 32426.171875, 6336.619350930272, -0.09249140413322961, 43581.578125, 8190.905484141938, 0.5784076153343883, 43653.859375, 8083.491026985161, 0.1620098429216142, 42220.28125, 6606.116880089122, -0.7080212214930796, 35827.40625, 9265.010261595016, 0.3777208621790055, 30534.8125, 7653.692762473795, 1.1296264000839018, 28723.765625, 4318.809821373634, -0.8884123426199251, 32835.765625, 4352.135412437596, 1.0604165474165603, 24206.1875, 6873.38004749801, -0.9286648569538536, 33401.96875, 3765.8855821404663, 0.7569985726152981, 39786.8125, 3550.030536290322, -0.6547966079560137, 36377.546875, 12691.280372673307, -0.8329080036401862, 37465.78125, 8739.354430299669, -0.14948279633876488, 34506.265625, 8311.531855730227, 0.36858235761514574, 25117.734375, 9353.975016073025, -1.1676929031030703, 30105.140625, 7932.581332050722, -1.52498096072018, 16953.96875, 6752.361498877518, 0.45159685426471036, 31779.65625, 4569.710676080701, 2.2109444597044305, 38642.359375, 5348.859228164882, -0.4512713359249665, 47219.734375, 5299.016985023577, -2.28651546845402, 48801.890625, 3134.161227092842, -0.5362644683580378, 43814.484375, 5345.698881437848, 0.5562112350848015, 35843.46875, 3317.120150487986, 0.7611701889488701, 25246.234375, 5601.874596235029, 0.28635889809268594, 13837.84375, 5099.729919989483, 0.7068010541733045, 30458.515625, 6275.155142484993, 0.3089989594185681, 41830.765625, 5757.771947936403, -1.2441140135077189, 35590.484375, 9552.420709223703, 0.6687739715286529, 42818.609375, 9840.807491348824, -0.3263577980762701, 38196.625, 10257.940589642007, -0.19089386019768315, 28133.46875, 9421.11497178139, 0.4831342327412234, 22174.28125, 3116.114650433844, 2.1216992015980245, 12372.140625, 5017.646765003452, 0.8707759992220254,4],
# [171.328125, 119.7303030104926, -0.732114158203694, 235.078125, 68.43388796118758, -3.1440015525937426, 235.078125, 68.43388796118758, -3.1440015525937426, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 247.03125, 44.36812226630174, -5.388159060803248, 75.703125, 116.50465115279465, 0.8891812384738002, 139.453125, 126.93846069152711, -0.18832944617230335, 123.515625, 127.43772893401457, 0.06253053994807224, 131.484375, 127.43772893401457, -0.06253053994807224, 179.296875, 116.50465115279465, -0.8891812384738002, 251.015625, 31.624996140068934, -7.81126577552403, 163.359375, 122.3534029956232, -0.5861606481232525, 111.5625, 126.49998456027573, 0.25197631533948484, 99.609375, 124.41206949934309, 0.448358830654244, 199.21875, 105.41665380022978, -1.360672102833218, 183.28125, 114.65034735419471, -0.9730672655996823, 215.15625, 92.58850812027106, -1.8934585248125149, 223.125, 84.33332304018383, -2.2677868380553634, 235.078125, 68.43388796118758, -3.1440015525937426, 191.25, 110.41823898251593, -1.1547005383792515, 187.265625, 112.6246867625361, -1.0613237065158376, 163.359375, 122.3534029956232, -0.5861606481232525, 167.34375, 121.11451434876622, -0.657951694959769, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 235.078125, 68.43388796118758, -3.1440015525937426, 239.0625, 61.72567208018071, -3.614784456460256, 239.0625, 61.72567208018071, -3.614784456460256, 255.0, 0.0, 0.0, 219.140625, 88.64674754106535, -2.067546244887276, 103.59375, 125.23873686259176, 0.38177085778546666, 215.15625, 92.58850812027106, -1.8934585248125149, 247.03125, 44.36812226630174, -5.388159060803248, 199.21875, 105.41665380022978, -1.360672102833218, 175.3125, 118.19566338808713, -0.8090398349558905, 191.25, 110.41823898251593, -1.1547005383792515, 223.125, 84.33332304018383, -2.2677868380553634, 155.390625, 124.41206949934309, -0.448358830654244, 39.84375, 92.58850812027106, 1.8934585248125149, 171.328125, 119.7303030104926, -0.732114158203694, 215.15625, 92.58850812027106, -1.8934585248125149, 139.453125, 126.93846069152711, -0.18832944617230335, 159.375, 123.45134416036142, -0.5163977794943223, 167.34375, 121.11451434876622, -0.657951694959769, 211.171875, 96.20429997658304, -1.7394622697814226, 123.515625, 127.43772893401457, 0.06253053994807224, 47.8125, 99.52965559947447, 1.6012815380508714, 139.453125, 126.93846069152711, -0.18832944617230335, 239.0625, 61.72567208018071, -3.614784456460256, 219.140625, 88.64674754106535, -2.067546244887276, 195.234375, 108.01992614031623, -1.2541088930576398, 215.15625, 92.58850812027106, -1.8934585248125149, 131.484375, 127.43772893401457, -0.06253053994807224, 79.6875, 118.19566338808713, 0.8090398349558905, 71.71875, 114.65034735419471, 0.9730672655996823, 35.859375, 88.64674754106535, 2.067546244887276, 147.421875, 125.93398626456789, -0.31638599858416633, 235.078125, 68.43388796118758, -3.1440015525937426, 255.0, 0.0, 0.0, 175.3125, 118.19566338808713, -0.8090398349558905, 111.5625, 126.49998456027573, 0.25197631533948484, 79.6875, 118.19566338808713, 0.8090398349558905,1]

# ]



# Make a prediction with a decision tree
#
#
# def predict(node, row):
#     if row[node['index']] < node['value']:
#         if isinstance(node['left'], dict):
#             return predict(node['left'], row)
#         else:
#             return node['left']
#     else:
#         if isinstance(node['right'], dict):
#             return predict(node['right'], row)
#         else:
#             return node['right']
#
#
# def read_csv_and_predict():
#     row = load_csv("/Users/arushigaur/Documents/masters_projects/mwdb/Mwdb_Project_2/output_test/output_image.csv")
#
#     prediction = predict(tree, row[0])
#     print("prediction: " + str(prediction))
    # accuracy = 0
    # for row in dataset_test:
    #     prediction = predict(tree, row)
    #     if row[-1] == prediction:
    #         accuracy += 1

    # accuracy = accuracy/len(dataset_test)

    # print('Accuracy: {}'.format(accuracy))


